<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Publishing Bioinformatics Methods | UFHCC BCB-SR Bioinformatics Wiki</title><link>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/</link><atom:link href="https://ufhcc-bcbsr.github.io/wiki/docs/publishing/index.xml" rel="self" type="application/rss+xml"/><description>Publishing Bioinformatics Methods</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><image><url>https://ufhcc-bcbsr.github.io/wiki/media/icon_hu_bb893f6dc6eaf6fe.png</url><title>Publishing Bioinformatics Methods</title><link>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/</link></image><item><title>Code Availability Statment</title><link>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/code-availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/code-availability/</guid><description>&lt;p>Journals (often) have strict yet confusing requirements for how they want manuscript figures to look. Here are some tips for how to handle this. [Using R]&lt;/p>
&lt;h2 id="getting-the-right-sizeresolution">Getting the right size/resolution&lt;/h2>
&lt;p>Journals often have size limits and recommended resolution for figures (e.g. no more than 6 in wide and 7 in tall, 600dpi resolution). Good news: if you use the ggplot2 package to make plots, you can then save your figures using &lt;a href="http://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">ggsave()&lt;/a>! There are options for width, height, and dpi. And since the resulting file will almost certainly be larger than the journal&amp;rsquo;s size limit, use the argument compression=&amp;lsquo;lzw&amp;rsquo; to make it smaller.&lt;/p>
&lt;h2 id="multi-part-figures">Multi-part figures&lt;/h2>
&lt;p>I have found the package &lt;a href="https://cran.r-project.org/web/packages/multipanelfigure/multipanelfigure.pdf" target="_blank" rel="noopener">multipanelfigure&lt;/a> to be very useful. It allows you to make a multi-part figure by putting together any kind of objects: ggplot figures, base R figures, pngs, whatever. There is a fairly easy to understand example on their &lt;a href="https://github.com/cran/multipanelfigure" target="_blank" rel="noopener">GitHub repo&lt;/a>, and I used it in &lt;a href="https://github.com/emchristensen/Extreme-events-LDA/blob/master/rodent_LDA_analysis.r" target="_blank" rel="noopener">line 188 of this script&lt;/a>. The general idea is you create a grid object with the function multi_panel_figure(), in which you specify things like size of columns/rows:&lt;/p>
&lt;p>&lt;code>grid_object &amp;lt;- multi_panel_figure(width = c(50,50), height = c(50,50))&lt;/code>&lt;/p>
&lt;p>and then fill the grid one cell at a time&lt;/p>
&lt;p>&lt;code>grid_object %&amp;lt;&amp;gt;% fill_panel(ggplot_figure, row = 1, column = 1)&lt;/code>&lt;/p>
&lt;p>&lt;code>grid_object %&amp;lt;&amp;gt;% fill_panel(png_path, row = 1, column = 2)&lt;/code>&lt;/p>
&lt;p>You can then use the function save_multi_panel_figure() which is similar to ggsave(), and again specify dpi and compression. Getting it to the right size is harder, I ended up playing around with column and row sizes until it fit.&lt;/p></description></item><item><title>Data Availability Statement</title><link>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/data-availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/data-availability/</guid><description>&lt;p>Journals (often) have strict yet confusing requirements for how they want manuscript figures to look. Here are some tips for how to handle this. [Using R]&lt;/p>
&lt;h2 id="getting-the-right-sizeresolution">Getting the right size/resolution&lt;/h2>
&lt;p>Journals often have size limits and recommended resolution for figures (e.g. no more than 6 in wide and 7 in tall, 600dpi resolution). Good news: if you use the ggplot2 package to make plots, you can then save your figures using &lt;a href="http://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">ggsave()&lt;/a>! There are options for width, height, and dpi. And since the resulting file will almost certainly be larger than the journal&amp;rsquo;s size limit, use the argument compression=&amp;lsquo;lzw&amp;rsquo; to make it smaller.&lt;/p>
&lt;h2 id="multi-part-figures">Multi-part figures&lt;/h2>
&lt;p>I have found the package &lt;a href="https://cran.r-project.org/web/packages/multipanelfigure/multipanelfigure.pdf" target="_blank" rel="noopener">multipanelfigure&lt;/a> to be very useful. It allows you to make a multi-part figure by putting together any kind of objects: ggplot figures, base R figures, pngs, whatever. There is a fairly easy to understand example on their &lt;a href="https://github.com/cran/multipanelfigure" target="_blank" rel="noopener">GitHub repo&lt;/a>, and I used it in &lt;a href="https://github.com/emchristensen/Extreme-events-LDA/blob/master/rodent_LDA_analysis.r" target="_blank" rel="noopener">line 188 of this script&lt;/a>. The general idea is you create a grid object with the function multi_panel_figure(), in which you specify things like size of columns/rows:&lt;/p>
&lt;p>&lt;code>grid_object &amp;lt;- multi_panel_figure(width = c(50,50), height = c(50,50))&lt;/code>&lt;/p>
&lt;p>and then fill the grid one cell at a time&lt;/p>
&lt;p>&lt;code>grid_object %&amp;lt;&amp;gt;% fill_panel(ggplot_figure, row = 1, column = 1)&lt;/code>&lt;/p>
&lt;p>&lt;code>grid_object %&amp;lt;&amp;gt;% fill_panel(png_path, row = 1, column = 2)&lt;/code>&lt;/p>
&lt;p>You can then use the function save_multi_panel_figure() which is similar to ggsave(), and again specify dpi and compression. Getting it to the right size is harder, I ended up playing around with column and row sizes until it fit.&lt;/p></description></item><item><title>Publication Quality Figures</title><link>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/publication-figures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/publication-figures/</guid><description>&lt;p>Journals (often) have strict yet confusing requirements for how they want manuscript figures to look. Here are some tips for how to handle this. [Using R]&lt;/p>
&lt;h2 id="getting-the-right-sizeresolution">Getting the right size/resolution&lt;/h2>
&lt;p>Journals often have size limits and recommended resolution for figures (e.g. no more than 6 in wide and 7 in tall, 600dpi resolution). Good news: if you use the ggplot2 package to make plots, you can then save your figures using &lt;a href="http://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">ggsave()&lt;/a>! There are options for width, height, and dpi. And since the resulting file will almost certainly be larger than the journal&amp;rsquo;s size limit, use the argument compression=&amp;lsquo;lzw&amp;rsquo; to make it smaller.&lt;/p>
&lt;h2 id="multi-part-figures">Multi-part figures&lt;/h2>
&lt;p>I have found the package &lt;a href="https://cran.r-project.org/web/packages/multipanelfigure/multipanelfigure.pdf" target="_blank" rel="noopener">multipanelfigure&lt;/a> to be very useful. It allows you to make a multi-part figure by putting together any kind of objects: ggplot figures, base R figures, pngs, whatever. There is a fairly easy to understand example on their &lt;a href="https://github.com/cran/multipanelfigure" target="_blank" rel="noopener">GitHub repo&lt;/a>, and I used it in &lt;a href="https://github.com/emchristensen/Extreme-events-LDA/blob/master/rodent_LDA_analysis.r" target="_blank" rel="noopener">line 188 of this script&lt;/a>. The general idea is you create a grid object with the function multi_panel_figure(), in which you specify things like size of columns/rows:&lt;/p>
&lt;p>&lt;code>grid_object &amp;lt;- multi_panel_figure(width = c(50,50), height = c(50,50))&lt;/code>&lt;/p>
&lt;p>and then fill the grid one cell at a time&lt;/p>
&lt;p>&lt;code>grid_object %&amp;lt;&amp;gt;% fill_panel(ggplot_figure, row = 1, column = 1)&lt;/code>&lt;/p>
&lt;p>&lt;code>grid_object %&amp;lt;&amp;gt;% fill_panel(png_path, row = 1, column = 2)&lt;/code>&lt;/p>
&lt;p>You can then use the function save_multi_panel_figure() which is similar to ggsave(), and again specify dpi and compression. Getting it to the right size is harder, I ended up playing around with column and row sizes until it fit.&lt;/p></description></item><item><title>Authorship</title><link>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/authorship/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ufhcc-bcbsr.github.io/wiki/docs/publishing/authorship/</guid><description>&lt;p>[In Progress]&lt;/p>
&lt;p>Trying to figure out who should be an author on a project - especially one developed in a group context - can be complicated. How much involvement warrants authorship credit is not clearly defined or nor is someone&amp;rsquo;s involvement easily quantified. The Weecology Philosophy is that it is better to be inclusive than exclusive. This is because it is easy to discount people&amp;rsquo;s contributions based on internalized biases. Some of these biases are things we have from our society. Some of these biases are because we have pre-conceived notions about how difficult/important/meaningful certain contributions are. If someone has done something for a project&lt;/p></description></item></channel></rss>